library(HDtweedie)
examples(HDtweedie)
example(HDtweedie)
m2
auto
head(data)
head(auto)
crossprod
crossprod(1:3,1:3)
load("spam.rda")#
source("aobjects.R", chdir = TRUE)#
source("kernelmatrix.R", chdir = TRUE)#
source("kernels.R", chdir = TRUE)#
source("spenvlp.R", chdir = TRUE)#
source("fista_backtracking.R", chdir = TRUE)#
source("spenv.r", chdir = TRUE)#
rbf <- rbfdot(sigma = 0.05) #
#
x <- rnorm(10) #
y <- rnorm(10)#
dt <- as.matrix(spam[c(10:20,3000:3010),-58])#
#
rbf <- rbfdot(sigma = 0.05) #
rbf#
A1 = kernelMatrix(rbf, dt[,1:10])#
A2 = kernelMatrix(rbf, dt[,11:20])#
A3 = kernelMatrix(rbf, dt[,21:30])#
b2 <- rnorm(22)#
b3 <- rnorm(22)#
#
lambda <- 0.5#
weight <- 1#
eps <- 1e-18#
maxit <- 1e5#
a_vec_init=rnorm(22)#
#
system.time(olda_vec <- spenvlp(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))#
system.time(olda_vec1 <- fista_backtracking(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))
olda_vec
olda_vec1
ov <- olda_vec1$a_vec#
#
lmax_A1 <- max(eigen(A1)$values)#
lmax_A2 <- max(eigen(A2)$values)#
lmax_A3 <- max(eigen(A3)$values)#
gamma <- 4*lmax_A1 + 2*lmax_A2 + 2*lmax_A3#
#
U <- drop(4*A1%*%ov/drop(1+ov%*%A1%*%ov)-					#
2*A2%*%(ov+b2)/drop(1+(ov+b2)%*%A2%*%(ov+b2))-		#
2*A3%*%(ov+b3)/drop(1+(ov+b3)%*%A3%*%(ov+b3)))#
U_working <- (U + gamma * ov)#
U_norm <- drop(sqrt(crossprod(U_working,U_working)))#
t <- U_norm - weight * lambda#
#
anorm <- sqrt(crossprod(ov,ov))#
if(anorm!=0){#
	tmp  <- -U + lambda * weight * ov/anorm#
	print(tmp)	#
}else{#
	print(t)#
}
load("spam.rda")#
source("aobjects.R", chdir = TRUE)#
source("kernelmatrix.R", chdir = TRUE)#
source("kernels.R", chdir = TRUE)#
source("spenvlp.R", chdir = TRUE)#
source("fista_backtracking.R", chdir = TRUE)#
source("spenv.r", chdir = TRUE)#
rbf <- rbfdot(sigma = 0.05) #
#
x <- rnorm(10) #
y <- rnorm(10)#
dt <- as.matrix(spam[c(10:20,3000:3010),-58])#
#
rbf <- rbfdot(sigma = 0.05) #
rbf#
A1 = kernelMatrix(rbf, dt[,1:10])#
A2 = kernelMatrix(rbf, dt[,11:20])#
A3 = kernelMatrix(rbf, dt[,21:30])#
b2 <- rnorm(22)#
b3 <- rnorm(22)#
#
lambda <- 0.5#
weight <- 1#
eps <- 1e-18#
maxit <- 1e5#
a_vec_init=rnorm(22)#
#
system.time(olda_vec <- spenvlp(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))#
system.time(olda_vec1 <- fista_backtracking(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))#
ov <- olda_vec1$a_vec#
gamma = olda_vec1$L#
#
lmax_A1 <- max(eigen(A1)$values)#
lmax_A2 <- max(eigen(A2)$values)#
lmax_A3 <- max(eigen(A3)$values)#
gamma <- 4*lmax_A1 + 2*lmax_A2 + 2*lmax_A3#
#
U <- drop(4*A1%*%ov/drop(1+ov%*%A1%*%ov)-					#
2*A2%*%(ov+b2)/drop(1+(ov+b2)%*%A2%*%(ov+b2))-		#
2*A3%*%(ov+b3)/drop(1+(ov+b3)%*%A3%*%(ov+b3)))#
U_working <- (U + gamma * ov)#
U_norm <- drop(sqrt(crossprod(U_working,U_working)))#
t <- U_norm - weight * lambda#
#
anorm <- sqrt(crossprod(ov,ov))#
if(anorm!=0){#
	tmp  <- -U + lambda * weight * ov/anorm#
	print(tmp)	#
}else{#
	print(t)#
}
load("spam.rda")#
source("aobjects.R", chdir = TRUE)#
source("kernelmatrix.R", chdir = TRUE)#
source("kernels.R", chdir = TRUE)#
source("spenvlp.R", chdir = TRUE)#
source("fista_backtracking.R", chdir = TRUE)#
source("spenv.r", chdir = TRUE)#
rbf <- rbfdot(sigma = 0.05) #
#
x <- rnorm(10) #
y <- rnorm(10)#
dt <- as.matrix(spam[c(10:20,3000:3010),-58])#
#
rbf <- rbfdot(sigma = 0.05) #
rbf#
A1 = kernelMatrix(rbf, dt[,1:10])#
A2 = kernelMatrix(rbf, dt[,11:20])#
A3 = kernelMatrix(rbf, dt[,21:30])#
b2 <- rnorm(22)#
b3 <- rnorm(22)#
#
lambda <- 0.5#
weight <- 1#
eps <- 1e-18#
maxit <- 1e5#
a_vec_init=rnorm(22)#
#
system.time(olda_vec <- spenvlp(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))#
system.time(olda_vec1 <- fista(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))
setwd('/Users/yiyang/Dropbox/Research/prog_project/spenvlp')
load("spam.rda")#
source("aobjects.R", chdir = TRUE)#
source("kernelmatrix.R", chdir = TRUE)#
source("kernels.R", chdir = TRUE)#
source("spenvlp.R", chdir = TRUE)#
source("fista_backtracking.R", chdir = TRUE)#
source("fista.R", chdir = TRUE)#
source("spenv.r", chdir = TRUE)#
rbf <- rbfdot(sigma = 0.05) #
#
x <- rnorm(10) #
y <- rnorm(10)#
dt <- as.matrix(spam[c(10:20,3000:3010),-58])#
#
rbf <- rbfdot(sigma = 0.05) #
rbf#
A1 = kernelMatrix(rbf, dt[,1:10])#
A2 = kernelMatrix(rbf, dt[,11:20])#
A3 = kernelMatrix(rbf, dt[,21:30])#
b2 <- rnorm(22)#
b3 <- rnorm(22)#
#
lambda <- 0.5#
weight <- 1#
eps <- 1e-18#
maxit <- 1e5#
a_vec_init=rnorm(22)#
#
system.time(olda_vec <- spenvlp(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))#
system.time(olda_vec1 <- fista(b2=b2, b3=b3, A1=A1, A2=A2, A3=A3, lambda=lambda,eps=eps, maxit=maxit, weight=weight, a_vec_init=a_vec_init))
